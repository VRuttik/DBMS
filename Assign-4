-- Create 'users' table
CREATE TABLE users (
    id INT PRIMARY KEY,
    name VARCHAR(255),
    email VARCHAR(255)
);

-- Insert data into 'users' table
INSERT INTO users (id, name, email) VALUES
(1, 'John Doe', 'john@example.com'),
(2, 'Jane Smith', 'jane@example.com'),
(3, 'Bob Johnson', 'bob@example.com');

-- Create 'orders' table
CREATE TABLE orders (
    id INT PRIMARY KEY,
    user_id INT,
    product VARCHAR(255),
    amount DECIMAL(10, 2),
    FOREIGN KEY (user_id) REFERENCES users(id)
);

-- Insert data into 'orders' table
INSERT INTO orders (id, user_id, product, amount) VALUES
(101, 1, 'Product A', 50.00),
(102, 1, 'Product B', 75.50),
(103, 2, 'Product C', 30.25),
(104, 3, 'Product D', 100.00);

-- Create Trigger for Inserting Orders
DELIMITER //
CREATE TRIGGER after_order_insert
AFTER INSERT ON orders
FOR EACH ROW
BEGIN
    UPDATE users
    SET amount_spent = amount_spent + NEW.amount
    WHERE id = NEW.user_id;
END;
//
DELIMITER ;

-- Create Trigger for Deleting Orders
DELIMITER //
CREATE TRIGGER after_order_delete
AFTER DELETE ON orders
FOR EACH ROW
BEGIN
    UPDATE users
    SET amount_spent = amount_spent - OLD.amount
    WHERE id = OLD.user_id;
END;
//
DELIMITER ;

-- Create Trigger for Updating Orders
DELIMITER //
CREATE TRIGGER after_order_update
AFTER UPDATE ON orders
FOR EACH ROW
BEGIN
    UPDATE users
    SET amount_spent = amount_spent - OLD.amount + NEW.amount
    WHERE id = NEW.user_id;
END;
//
DELIMITER ;


SELECT
    users.id AS user_id,
    users.name AS user_name,
    users.email AS user_email,
    orders.id AS order_id,
    orders.product,
    orders.amount
FROM
    users
JOIN
    orders ON users.id = orders.user_id;
