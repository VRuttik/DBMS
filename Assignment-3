-- Create the "Students" table with a primary key constraint
CREATE TABLE Students (
    student_id INT PRIMARY KEY,
    student_name VARCHAR(50) NOT NULL,
    student_age INT
);

-- Create the "Courses" table with a foreign key constraint
CREATE TABLE Courses (
    course_id INT PRIMARY KEY,
    course_name VARCHAR(50) NOT NULL,
    student_id INT,
    FOREIGN KEY (student_id) REFERENCES Students(student_id)
);

-- Insert data into the "Students" table
INSERT INTO Students (student_id, student_name, student_age)
VALUES
    (1, 'Alice', 20),
    (2, 'Bob', 22),
    (3, 'Charlie', 21);

-- Insert data into the "Courses" table
INSERT INTO Courses (course_id, course_name, student_id)
VALUES
    (101, 'Math 101', 1),
    (102, 'English 101', 2),
    (103, 'Science 101', 3);

-- Grant SELECT permission to a user (DCL)
-- Replace 'username' with the actual username or role
GRANT SELECT ON Students TO username;

-- Modify the "Students" table by adding a new column (DDL)
ALTER TABLE Students
ADD student_email VARCHAR(100);

-- Update data in the "Students" table (DML)
UPDATE Students
SET student_email = 'alice@example.com'
WHERE student_id = 1;

-- Delete a record from the "Courses" table (DML)
DELETE FROM Courses
WHERE course_id = 103;

-- Define additional superkeys

-- For the "Students" table
-- (student_id) is already a superkey as the primary key
-- (student_name) and (student_age) can also be considered superkeys
-- but are not candidate keys due to potential duplicates.

-- For the "Courses" table
-- (course_id) is already a superkey as the primary key
-- (course_name, student_id) and (student_id, course_name) can be considered superkeys
-- but are not candidate keys due to potential duplicates.

-- Retrieve a list of courses and the names of students enrolled in each course using a JOIN
SELECT
    Courses.course_name,
    Students.student_name
FROM
    Courses
INNER JOIN
    Students
ON
    Courses.student_id = Students.student_id;
